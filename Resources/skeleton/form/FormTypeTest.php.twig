<?php
/**
 * Form test template taken from
 * https://symfony.com/doc/3.4/form/unit_testing.html
 */

namespace {{namespace}}\Tests\Form;

use {{ namespace }}\Form\{{ form_class }};
use {{ entity_class }};
use Symfony\Component\Form\Test\TypeTestCase;

/**
 * Autogenerated test class for form {{ form_class }}
 */

class {{ form_class }}Test extends TypeTestCase
{
    /**
     * @var EntityManager
     */
    private $em;

    /*
     * @var \PHPUnit_Framework_MockObject_MockObject|ManagerRegistry
     */
    private $emRegistry;

    protected function setUp(): void
    {
        //setup mock EntityManager and ManagerRegistry
        $this->em = DoctrineTestHelper::createTestEntityManager();
        $this->em->getConfiguration()->addEntityNamespace('App', 'App\\Entity'); //add App alias
        $this->emRegistry = $this->createRegistryMock('default', $this->em);

        parent::setUp();

        $schemaTool = new SchemaTool($this->em);

        // This is the important part for you !
        $classes = [$this->em->getClassMetadata({{ entity_class }}::class)];

        try {
            $schemaTool->dropSchema($classes);
        } catch (\Exception $e) {
        }

        try {
            $schemaTool->createSchema($classes);
        } catch (\Exception $e) {
        }
    }

    protected function createRegistryMock($name, $em)
    {
        $registry = $this->getMockForAbstractClass('Doctrine\Persistence\AbstractManagerRegistry', array(
            'name' => $name,
            'connections' => array(),
            'managers' => array($em),
            'defaultConnection' => new Connection([], new \Doctrine\DBAL\Driver\PDOSqlite\Driver([])),
            'defaultManager' => $em,
            'proxyInterfaceName' => 'Symfony\Component\Form\FormBuilderInterface'
        ));

        $registry->expects($this->any())
            ->method('getService')
            //->with($this->equalTo($name))
            ->will($this->returnValue($em));

        $registry->expects($this->any())
            ->method('getAliasNamespace')
            //->with($this->equalTo('App'))
            ->will($this->returnValue('App\Entity'));

        return $registry;
    }

    protected function getExtensions()
    {
        return array_merge(parent::getExtensions(), array(
            new DoctrineOrmExtension($this->emRegistry),
        ));
    }

    protected function tearDown(): void
    {
        parent::tearDown();

        $this->em = null;
        $this->emRegistry = null;
    }

    public function testSubmitValidData()
    {
        $formData = array(
        {% for name, value in form_fields %}
        '{{ name }}' => {{ value }},
        {% endfor %}
        );

        $model = new {{ entity_class }}();
        // $formData will retrieve data from the form submission; pass it as the second argument
        $form = $this->factory->create({{ form_class }}::class, $model);

        $expected = new {{ entity_class }}();

        // populate $object properties with the data stored in $formData
        $expected
        {% for name, value in form_fields %}
                ->set{{ name | title | replace({'_': ""})}}({{ value }})
        {% endfor %}
        ;

        // submit the data to the form directly
        $form->submit($formData);

        // This check ensures there are no transformation failures
        $this->assertTrue($form->isSynchronized());

        // check that $formData was modified as expected when the form was submitted
        $this->assertEquals($expected, $model);
    }

    public function testCustomFormView()
    {
        $formData = new {{ entity_class }}();
        $formData
        {% for name, value in form_fields %}
                  ->set{{ name | title | replace({'_': ""}) }}({{ value }})
        {% endfor %}
        ;

        // The initial data may be used to compute custom view variables
        $view = $this->factory->create({{ form_class }}::class, $formData)
                ->createView();

        {% for name, value in form_fields%}

        $this->assertArrayHasKey('{{ name|lower }}', $view->vars);
        $this->assertSame({{ value }}, $view->vars['{{ name|lower }}']);
        {%- endfor %}
    }
}
